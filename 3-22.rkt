#lang sicp

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (print-queue)
      (display front-ptr))
    (define (set-front-ptr! item)
      (set! front-ptr item))
    (define (set-rear-ptr! item)
      (set! rear-ptr item))
    (define (empty-queue?)
      (null? front-ptr))
    (define (front-queue)
      (if (empty-queue?)
          (begin (display "queue is empty. Can not call front on it.")
                 (newline)
                 (print-queue))
          (car front-ptr)))
    (define (insert-queue! item)
      (let ((new-pair (cons item '())))
        (cond ((empty-queue?)
               (set-front-ptr! new-pair)
               (set-rear-ptr! new-pair)
               (print-queue))
              (else (set-cdr! rear-ptr new-pair)
                    (set-rear-ptr! new-pair)
                    (print-queue)))))
    (define (delete-queue!)
      (cond ((empty-queue?)
         (display "queue is empty. Can not delete item from it.")
         (newline)
         (print-queue))
        (else (set-front-ptr! (cdr front-ptr))
              (print-queue))))
    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) empty-queue?)
            ((eq? m 'print-queue) print-queue)
            ((eq? m 'front-queue) front-queue)
            ((eq? m 'insert-queue!) insert-queue!)
            ((eq? m 'delete-queue!) delete-queue!)
            (else (display "Can not find the method"))))
    dispatch))

(define q (make-queue))
((q 'print-queue))
(newline)
((q 'insert-queue!) 1)
(newline)
((q 'front-queue))
(newline)
((q 'insert-queue!) 2)
(newline)
((q 'delete-queue!))
(newline)
((q 'insert-queue!) 3)
(newline)
((q 'delete-queue!))