#lang sicp

(define (make-table)
  (let ((local-table (cons '*table* '())))
    (define (same-key? key1 key2)
      (< (abs (- key1 key2)) 0.0001))
    (define (assoc key records)
      (cond ((null? records) false)
            ((same-key? (caar records) key) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup key)
      (let ((record (assoc key (cdr local-table))))
        (if record
            (cdr record)
            false)))
    (define (insert! key value)
      (let ((record (assoc key (cdr local-table))))
        (if record
            (set-cdr! record value)
            (set-cdr! local-table
                      (cons (cons key value)
                            (cdr local-table))))))
    (define (dispatch m)
      (cond ((eq? m 'lookup) lookup)
            ((eq? m 'insert!) insert!)
            (else (display "error"))))
    dispatch))

(define t (make-table))
((t 'insert!) 1 1)
((t 'insert!) 2 22)
((t 'lookup) 1)
((t 'lookup) 1.000001)
((t 'lookup) 2)
((t 'lookup) 2.00001)
((t 'lookup) 2.1)