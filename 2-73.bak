#lang sicp

(define (variable? x) (symbol? x))

(define (same-variable? v1 v2)
  (and (symbol? v1) (symbol? v2) (eq? v1 v2)))

(define (=number? a1 a2)
  (and (number? a1) (number? a2) (= a1 a2)))

(define (operator exp)
  (car exp))

(define (operands exp)
  (cdr exp))

(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp)
         (if (same-variable? exp var)
             1
             0))
        (else ((get 'deriv (operator exp)) (operands exp) var))))

(define (deriv-add-package)
  (define (sum? x)
    (and (pair? x) (eq? (car x) '+)))
  
  (define (addend s) (cadr s))
  
  (define (augend s) (caddr s))

  (define (make-sum a1 a2)
  (cond ((=number? a1 0) a2)
        ((=number? a2 0) a1)
        ((and (number? a1) (number? a2)) (+ a1 a2))
        (else (list '+ a1 a2))))
  
  (define (derive_add x)
    (if (sum? x)
        (make-sum (deriv (addend exp) var)
                   (deriv (augend exp) var))
        (else (display "Eror: " (list x)))))

  (put 'deriv '+ derive_add))