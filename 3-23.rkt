#lang sicp

(define (front-ptr queue)
  (car queue))

(define (rear-ptr queue)
  (cdr queue))

(define (set-front-ptr! queue item)
  (set-car! queue item))

(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (empty-queue? queue)
  (null? (front-ptr queue)))

(define (make-queue)
  (cons '() '()))

(define (value item)
  (car item))

(define (prev item)
  (car (cdr item)))

(define (set-prev! item prev-item)
  (set-car! (cdr item) prev-item))

(define (next item)
  (cdr (cdr item)))

(define (set-next! item next-item)
  (set-cdr! (cdr item) next-item))

(define (print-queue queue)
  (define (print-queue-iter q)
    (cond ((null? q) (begin (display "") (newline)))
          ((eq? q (rear-ptr queue))
           (begin (display (car q)) (newline)))
          (else (begin (display (value q))
                       (display " ")
                       (print-queue-iter (next q))))))
  (print-queue-iter (front-ptr queue)))

(define (front-queue queue)
  (if (empty-queue? queue)
      (begin (display "queue is empty. Can not call front on it.")
             (newline)
             (print-queue queue))
      (value (front-ptr queue))))

(define (front-insert-queue! queue item)
  (let ((new-pair (cons item (cons '() '()))))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           (set-prev! new-pair new-pair)
           (set-next! new-pair new-pair)
           (print-queue queue))
          (else (set-next! new-pair (front-ptr queue))
                (set-prev! new-pair (rear-ptr queue))
                (set-prev! (front-ptr queue) new-pair)
                (set-front-ptr! queue new-pair)
                (print-queue queue)))))

(define (rear-insert-queue! queue item)
  (let ((new-pair (cons item (cons '() '()))))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           (set-prev! new-pair new-pair)
           (set-next! new-pair new-pair)
           (print-queue queue))
          (else (set-next! new-pair (front-ptr queue))
                (set-prev! new-pair (rear-ptr queue))
                (set-next! (rear-ptr queue) new-pair)
                (set-rear-ptr! queue new-pair)
                (print-queue queue)))))

(define (rear-delete-queue! queue)
  (cond ((empty-queue? queue)
         (display "queue is empty. Can not delete item from it.")
         (newline)
         (print-queue queue))
        ((eq? (front-ptr queue) (rear-ptr queue))
         (set-front-ptr! queue '())
         (set-rear-ptr! queue '())
         (print-queue queue))
        (else (set-next! (prev (rear-ptr queue)) (front-ptr queue))
              (set-prev! (front-ptr queue) (prev (rear-ptr queue)))
              (set-rear-ptr! queue (prev (rear-ptr queue)))
              (print-queue queue))))

(define (front-delete-queue! queue)
  (cond ((empty-queue? queue)
         (display "queue is empty. Can not delete item from it.")
         (newline)
         (print-queue queue))
        ((eq? (front-ptr queue) (rear-ptr queue))
         (set-front-ptr! queue '())
         (set-rear-ptr! queue '())
         (print-queue queue))
        (else (set-prev! (next (front-ptr queue)) (rear-ptr queue))
              (set-next! (rear-ptr queue) (next (front-ptr queue)))
              (set-front-ptr! queue (next (front-ptr queue)))
              (print-queue queue))))

(define q (make-queue))
(empty-queue? q)
;(delete-queue! q)
(front-queue q)
(front-insert-queue! q '1)
;(delete-queue! q)
(front-insert-queue! q '2)
(front-insert-queue! q '3)
(rear-insert-queue! q '4)
(rear-insert-queue! q '5)
;(front-queue q)
(front-delete-queue! q)
(front-delete-queue! q)
(front-delete-queue! q)
(front-delete-queue! q)
(front-delete-queue! q)